// 1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; console.log(c);//alert(c);           // 2 ++a это префиксная форма и инкрементирование производится сразу, 
//  а возврат — уже с обновленным значением.
d = b++; console.log(d);           // 1 b++ это постфиксная форма сначала происходит возвращение значения, 
//а потом выполняется инкрементирование.
c = (2 + ++a); console.log(c);    // 5 2 + 3 (т.к. по ++a инкрементирование производится сразу соотвественно +1)
d = (2 + b++); console.log(d);     // 4 (после второго шага b = 2 (2+2=4))
console.log(a);//alert(a);                    // 3 (a изначально 1, увеличилось на 1 сначало в 1 шаге , а потом  в 3 шаге)
console.log(b);//alert(b);                    // 3 (b изначально 1, увеличилось на 1 сначало в 2 шаге , а потом  в 4 шаге)
// Почему код даёт именно такие результаты?

// 2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2)// равно 5 (сначало  2*2 = 4 потом 4+1=5)

console.log('Чему будет равен x в примере ниже?');//alert('Чему будет равен x в примере ниже?')
console.log(x);//alert(x)


/*
3.
Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
*/

a = 10;
b = -10;
if (a >= 0 && b >= 0) {
    console.log(a - b);
} else if (a < 0 && b < 0) {
    console.log(a * b);
} else {
    console.log(a + b);
}

/*
4. 
Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
*/

console.log('Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.');
a = 0;
function myRecFuction(a) {
    if (a === 15) {
        return a;
    } return a++ + ' ' + myRecFuction(a++);
}

switch (a) {
    case 15:
        console.log(a);
        break;
    default:
        console.log(`${myRecFuction(a)}`);//рекурсивно вызываем функцию
}


/*
5.
Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.
*/

console.log('Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.');

function summa(arg1, arg2) {

    return arg1 + arg2;
};

function diff(arg1, arg2) {
    return arg1 - arg2;
};

function mult(arg1, arg2) {
    return arg1 * arg2;
};

function divis(arg1, arg2) {
    return arg1 / arg2;
};

console.log(summa(10, 10));
console.log(diff(10, 10));
console.log(mult(10, 10));
console.log(divis(10, 10));

/*
6.
Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch).
*/
console.log('Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch).')
function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case '+':
            return summa(arg1, arg2);
        case '-':
            return diff(arg1, arg2);
        case '*':
            return mult(arg1, arg2);
        case '/':
            return divis(arg1, arg2)
    }
}

console.log(mathOperation(30, 15, '+'))
console.log(mathOperation(30, 15, '-'))
console.log(mathOperation(30, 15, '*'))
console.log(mathOperation(30, 15, '/'))


/*
7. 
*Сравнить null и 0. Попробуйте объяснить результат.
*/

console.log('Сравнить null и 0. Попробуйте объяснить результат.')
console.log(null == 0)//false
console.log(null === 0)//false
//т.к. null это пустое значение,a 0 это число поэтому результат будет false
